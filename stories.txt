mbti.zip 접속
    - API 호출 person/list , job/list 8개씩
    - 카드 클릭 -> 라우팅으로 해당 아이템으로 이동
    - 더보기 클릭 -> 라우팅으로 해당 목록 실시간 베스트 순으로 이동
    - 검색 
    - Navbar 메뉴 클릭 -> 해당 목록으로 이동

mbti.zip/mbti/list
    - API 호출 mbti/list (id 를 가져와야함..)
    - 카드 클릭 -> 라우팅 -> 해당 mbti get 으로 이동

mbti.zip/mbti/get/{mbtiId}
    - API 호출 person/list , job/list 8개씩
    - 더보기 클릭 -> 라우팅 -> 해당 아이템의 mbti로 검색된 목록 으로 이동
    - 카드 클릭 -> 라우팅 -> 해당 아이템으로 이동

mbti.zip/job/list?page=1&size=16&sort=.....
    - props.location.search 를 받는다
    - API 호출 job/list
    - 페이지가 url 에 맞게 나타나야함
    - 정렬 select 태그가 url 에 맞게 나타나야함
    - 검색을 한다면 검색 input 이 유지돼야함

    -페이지 클릭 -> API 호출 -> 상태 변경 -> 페이지 상태도 변경
    -등록하기 클릭 -> 라우팅 -> 등록 페이지로 이동
    -카드 클릭 -> 해당 아이템으로 이동

mbti.zip/job/register
    -input 중 하나라도 비어있으면 안됨.
    -등록 클릭 -> API 호출 -> 모달 표시 -> 직업 목록으로 이동
    -초기화 클릭 -> 초기화

mbti.zip/job/get/{jobId}
    - API 호출 /job/get/{jobId}
    - API 호출 -> 각 mbti 별 카운트 조회
    - API 호출 -> 해당 아이템 댓글 조회
    - 좋아요 클릭 -> 좋아요 증가 -> 다시 클릭 -> 좋아요 감소 (상태변경)
        (API 호출 같이해야함)
    - 투표 클릭 -> 해당 mbti 투표율 증가 ->
        -> 다른 mbti로 다시 투표를 클릭할 경우 경고 표시
        -> 같은 mbti 로 투표할 경우 투표를 취소하겟습니까? -> 취소 
        (API 호출 같이해야함)
    - 삭제 클릭 -> 비밀번호 입력하는 form 모달 표시 -> 
        -> 비밀번호가 다르면 alert
        -> 같으면 삭제되엇습니다.
    - 댓글
        -> 페이지 클릭 -> API 호출 
        -> 댓글 등록 -> 모든 input 입력해야함 -> 성공 -> 모달
                                            -> 실패 -> 모달
        -> 좋아요 버튼 -> 위의 좋아요 로직과 동일
        -> x 버튼 -> 비밀번호 입력 후 삭제

반복 제거의 가능성이 있는 작업들
 -> API 호출 (조회, 검색, 등록, 좋아요, 조회수, 투표)
 -> 좋아요, 투표, 카드클릭, 조회수 등 
 -> 댓글 관련 모든 작업

 서로 다른 부분 
 -> 아이템

 공통 부분
 -> 기능들